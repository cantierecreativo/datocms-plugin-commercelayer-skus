"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ora = _interopRequireDefault(require("ora"));

var _progress = _interopRequireDefault(require("./progress"));

var _toApiKey = require("./toApiKey");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _require = require('humps'),
    camelize = _require.camelize;

function uploadData(id) {
  if (!id) {
    return null;
  }

  return {
    uploadId: id,
    alt: null,
    title: null,
    customData: {}
  };
}

var _default = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref) {
    var fieldsMapping, datoClient, contentfulData, contentfulRecordMap, spinner;
    return regeneratorRuntime.wrap(function _callee2$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            fieldsMapping = _ref.fieldsMapping, datoClient = _ref.datoClient, contentfulData = _ref.contentfulData, contentfulRecordMap = _ref.contentfulRecordMap;
            spinner = (0, _ora["default"])('').start();
            _context3.prev = 2;
            return _context3.delegateYield( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
              var entries, assets, progress, contentfulAssetsMap, _iterator, _step, _loop, _iterator2, _step2, entry, datoItemId, recordAttributes, _loop2, _i, _Object$keys;

              return regeneratorRuntime.wrap(function _callee$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      entries = contentfulData.entries, assets = contentfulData.assets;
                      progress = new _progress["default"](assets.length, 'Uploading assets');
                      spinner.text = progress.tick();
                      contentfulAssetsMap = {};
                      _iterator = _createForOfIteratorHelper(assets);
                      _context2.prev = 5;
                      _loop = /*#__PURE__*/regeneratorRuntime.mark(function _loop() {
                        var asset, fileAttributes, fileUrl, path, defaultFieldMetadata, upload;
                        return regeneratorRuntime.wrap(function _loop$(_context) {
                          while (1) {
                            switch (_context.prev = _context.next) {
                              case 0:
                                asset = _step.value;

                                if (!(asset.fields && asset.fields.file)) {
                                  _context.next = 15;
                                  break;
                                }

                                fileAttributes = asset.fields.file[contentfulData.defaultLocale];
                                fileUrl = "https:".concat(fileAttributes.url);
                                _context.next = 6;
                                return datoClient.createUploadPath(fileUrl);

                              case 6:
                                path = _context.sent;
                                defaultFieldMetadata = contentfulData.locales.reduce(function (acc, locale) {
                                  return Object.assign(acc, _defineProperty({}, locale, {
                                    title: asset.fields.title[locale],
                                    alt: asset.fields.title[locale],
                                    customData: {}
                                  }));
                                }, {});
                                _context.next = 10;
                                return datoClient.uploads.create({
                                  path: path,
                                  author: null,
                                  copyright: null,
                                  defaultFieldMetadata: defaultFieldMetadata
                                });

                              case 10:
                                upload = _context.sent;
                                contentfulAssetsMap[asset.sys.id.toString()] = upload.id;
                                spinner.text = progress.tick();
                                _context.next = 16;
                                break;

                              case 15:
                                spinner.text = progress.tick();

                              case 16:
                              case "end":
                                return _context.stop();
                            }
                          }
                        }, _loop);
                      });

                      _iterator.s();

                    case 8:
                      if ((_step = _iterator.n()).done) {
                        _context2.next = 12;
                        break;
                      }

                      return _context2.delegateYield(_loop(), "t0", 10);

                    case 10:
                      _context2.next = 8;
                      break;

                    case 12:
                      _context2.next = 17;
                      break;

                    case 14:
                      _context2.prev = 14;
                      _context2.t1 = _context2["catch"](5);

                      _iterator.e(_context2.t1);

                    case 17:
                      _context2.prev = 17;

                      _iterator.f();

                      return _context2.finish(17);

                    case 20:
                      spinner.succeed();
                      spinner = (0, _ora["default"])('').start();
                      progress = new _progress["default"](entries.length, 'Linking assets to records');
                      spinner.text = progress.tick();
                      _iterator2 = _createForOfIteratorHelper(entries);
                      _context2.prev = 25;

                      _iterator2.s();

                    case 27:
                      if ((_step2 = _iterator2.n()).done) {
                        _context2.next = 39;
                        break;
                      }

                      entry = _step2.value;
                      datoItemId = contentfulRecordMap[entry.sys.id];
                      recordAttributes = {};

                      _loop2 = function _loop2() {
                        var key = _Object$keys[_i];
                        var entryFieldValue = entry.fields[key];
                        var contentTypeApiKey = (0, _toApiKey.toItemApiKey)(entry.sys.contentType.sys.id);
                        var apiKey = (0, _toApiKey.toFieldApiKey)(key);
                        var field = fieldsMapping[contentTypeApiKey].find(function (f) {
                          return f.apiKey === apiKey;
                        });
                        var fileFieldAttributes = null;

                        if (field.fieldType === 'file' || field.fieldType === 'gallery') {
                          if (field.localized) {
                            var localizedValue = Object.keys(entryFieldValue).reduce(function (innerAcc, locale) {
                              var innerValue = entryFieldValue[locale];

                              if (field.fieldType === 'file') {
                                return Object.assign(innerAcc, _defineProperty({}, locale, uploadData(contentfulAssetsMap[innerValue.sys.id])));
                              }

                              return Object.assign(innerAcc, _defineProperty({}, locale, innerValue.map(function (link) {
                                return uploadData(contentfulAssetsMap[link.sys.id]);
                              }).filter(function (v) {
                                return !!v;
                              })));
                            }, {});
                            var fallbackValues = contentfulData.locales.reduce(function (innerAcc, locale) {
                              return Object.assign(innerAcc, _defineProperty({}, locale, localizedValue[contentfulData.defaultLocale]));
                            }, {});
                            recordAttributes = Object.assign(recordAttributes, _defineProperty({}, camelize(apiKey), _objectSpread(_objectSpread({}, fallbackValues), localizedValue)));
                          } else {
                            var innerValue = entryFieldValue[contentfulData.defaultLocale];

                            switch (field.fieldType) {
                              case 'file':
                                fileFieldAttributes = uploadData(contentfulAssetsMap[innerValue.sys.id]);
                                break;

                              case 'gallery':
                                fileFieldAttributes = innerValue.map(function (link) {
                                  return uploadData(contentfulAssetsMap[link.sys.id]);
                                }).filter(function (v) {
                                  return !!v;
                                });
                                break;

                              default:
                                break;
                            }

                            recordAttributes = Object.assign(recordAttributes, _defineProperty({}, camelize(apiKey), fileFieldAttributes));
                          }
                        }
                      };

                      for (_i = 0, _Object$keys = Object.keys(entry.fields); _i < _Object$keys.length; _i++) {
                        _loop2();
                      } // if no file/gallery is found, no update needed.


                      if (!(Object.entries(recordAttributes).length > 0)) {
                        _context2.next = 36;
                        break;
                      }

                      _context2.next = 36;
                      return datoClient.items.update(datoItemId, recordAttributes);

                    case 36:
                      spinner.text = progress.tick();

                    case 37:
                      _context2.next = 27;
                      break;

                    case 39:
                      _context2.next = 44;
                      break;

                    case 41:
                      _context2.prev = 41;
                      _context2.t2 = _context2["catch"](25);

                      _iterator2.e(_context2.t2);

                    case 44:
                      _context2.prev = 44;

                      _iterator2.f();

                      return _context2.finish(44);

                    case 47:
                      spinner.succeed();

                    case 48:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee, null, [[5, 14, 17, 20], [25, 41, 44, 47]]);
            })(), "t0", 4);

          case 4:
            _context3.next = 10;
            break;

          case 6:
            _context3.prev = 6;
            _context3.t1 = _context3["catch"](2);
            spinner.fail();
            throw _context3.t1;

          case 10:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee2, null, [[2, 6]]);
  }));

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();

exports["default"] = _default;