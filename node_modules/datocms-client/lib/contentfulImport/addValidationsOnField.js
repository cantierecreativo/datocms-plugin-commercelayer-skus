"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ora = _interopRequireDefault(require("ora"));

var _progress = _interopRequireDefault(require("./progress"));

var _toApiKey = require("./toApiKey");

var _datoFieldValidatorsFor = _interopRequireDefault(require("./datoFieldValidatorsFor"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
    var itemTypes, fieldsMapping, datoClient, contentfulData, spinner, contentTypes, fieldsSize, progress, _iterator, _step, contentType, contentTypeApiKey, itemTypeFields, _iterator2, _step2, _loop, _ret;

    return regeneratorRuntime.wrap(function _callee$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            itemTypes = _ref.itemTypes, fieldsMapping = _ref.fieldsMapping, datoClient = _ref.datoClient, contentfulData = _ref.contentfulData;
            spinner = (0, _ora["default"])('').start();
            _context2.prev = 2;
            contentTypes = contentfulData.contentTypes;
            fieldsSize = contentTypes.map(function (contentType) {
              return contentType.fields.length;
            }).reduce(function (acc, length) {
              return acc + length;
            }, 0);
            progress = new _progress["default"](fieldsSize, 'Adding validations on fields');
            spinner.text = progress.tick();
            _iterator = _createForOfIteratorHelper(contentTypes);
            _context2.prev = 8;

            _iterator.s();

          case 10:
            if ((_step = _iterator.n()).done) {
              _context2.next = 35;
              break;
            }

            contentType = _step.value;
            contentTypeApiKey = (0, _toApiKey.toItemApiKey)(contentType.sys.id);
            itemTypeFields = fieldsMapping[contentTypeApiKey];
            _iterator2 = _createForOfIteratorHelper(contentType.fields);
            _context2.prev = 15;
            _loop = /*#__PURE__*/regeneratorRuntime.mark(function _loop() {
              var field, fieldApiKey, datoField, validators;
              return regeneratorRuntime.wrap(function _loop$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      field = _step2.value;
                      fieldApiKey = (0, _toApiKey.toFieldApiKey)(field.id);
                      datoField = itemTypeFields.find(function (f) {
                        return f.apiKey === fieldApiKey;
                      });

                      if (datoField) {
                        _context.next = 5;
                        break;
                      }

                      return _context.abrupt("return", "break");

                    case 5:
                      _context.next = 7;
                      return (0, _datoFieldValidatorsFor["default"])({
                        field: field,
                        itemTypes: itemTypes
                      });

                    case 7:
                      validators = _context.sent;
                      _context.next = 10;
                      return datoClient.fields.update(datoField.id, {
                        validators: validators
                      });

                    case 10:
                      spinner.text = progress.tick();

                    case 11:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _loop);
            });

            _iterator2.s();

          case 18:
            if ((_step2 = _iterator2.n()).done) {
              _context2.next = 25;
              break;
            }

            return _context2.delegateYield(_loop(), "t0", 20);

          case 20:
            _ret = _context2.t0;

            if (!(_ret === "break")) {
              _context2.next = 23;
              break;
            }

            return _context2.abrupt("break", 25);

          case 23:
            _context2.next = 18;
            break;

          case 25:
            _context2.next = 30;
            break;

          case 27:
            _context2.prev = 27;
            _context2.t1 = _context2["catch"](15);

            _iterator2.e(_context2.t1);

          case 30:
            _context2.prev = 30;

            _iterator2.f();

            return _context2.finish(30);

          case 33:
            _context2.next = 10;
            break;

          case 35:
            _context2.next = 40;
            break;

          case 37:
            _context2.prev = 37;
            _context2.t2 = _context2["catch"](8);

            _iterator.e(_context2.t2);

          case 40:
            _context2.prev = 40;

            _iterator.f();

            return _context2.finish(40);

          case 43:
            spinner.succeed();
            _context2.next = 50;
            break;

          case 46:
            _context2.prev = 46;
            _context2.t3 = _context2["catch"](2);
            spinner.fail();
            throw _context2.t3;

          case 50:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee, null, [[2, 46], [8, 37, 40, 43], [15, 27, 30, 33]]);
  }));

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();

exports["default"] = _default;